
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE BACKSLASH BITAND BITNOT BITOR BITXOR BOOL CATCH CHAR CIN CLASS COLON COMMA CONST CONTINUE COUT DELETE DEQUAL DISTINT DIVIDE DIVIDEEQUAL DO DOUBLE ELSE ENDL EQUAL EXPLICIT FLOAT FOR GET GREATER GREATEREQUAL HASH ID IF INCLUDE INT LBLOCK LBRACKET LESS LESSEQUAL LGREATER LPAREN MINUS MINUSEQUAL MINUSMINUS MODULE NAMESPACE NOT NUMBER OR PLUS PLUSEQUAL PLUSPLUS POINT PRIVATE PUBLIC QUOTES RBLOCK RBRACKET RETURN RGREATER RPAREN SEMICOLON SIZEOF STATIC STD STRING TIMES TIMESEQUAL TRY TYPEDEF USING VOID WHILE WHITESPACEprograma : declaracion_listadeclaracion_lista : declaracion_lista declaracion\n                         | declaraciondeclaracion : declaracion_var\n                   | declaracion_funcionespecificador : INT\n                     | FLOATdeclaracion_var : especificador ID SEMICOLON\n                       | especificador ID EQUAL expresion SEMICOLON\n                       | especificador ID EQUAL estructura_dato SEMICOLONestructura_dato : expresion\n                       | estructura_compuestaestructura_compuesta : declaracion_lista\n                            | compound_stmt\n                            | tuplatupla : LPAREN elementos RPARENelementos : elementos COMMA NUMBER\n                 | NUMBERigualdad : DEQUALdeclaracion_funcion : especificador ID LPAREN parametro RPAREN compound_stmtparametro : especificador ID\n                 | parametro COMMA especificador IDcompound_stmt : LBLOCK declaracion_lista RBLOCKexpresion : ID\n                 | NUMBER\n                 | ID EQUAL expresion\n                 | expresion_simple\n                 | LPAREN expresion RPARENexpresion_simple : expresion_aditiva igualdad expresion_aditiva\n                        | expresion_aditivaexpresion_aditiva : termino sumorest expresion_aditiva\n                         | terminosumorest : PLUS\n                | MINUSvariable_scope : IDtermino : factorfactor : ID\n              | NUMBER\n              | LPAREN expresion RPAREN'
    
_lr_action_items = {'INT':([0,2,3,4,5,9,11,12,13,22,26,31,32,42,45,55,56,],[7,7,-3,-4,-5,-2,-8,7,7,7,7,-9,-10,7,7,-23,-20,]),'FLOAT':([0,2,3,4,5,9,11,12,13,22,26,31,32,42,45,55,56,],[8,8,-3,-4,-5,-2,-8,8,8,8,8,-9,-10,8,8,-23,-20,]),'$end':([1,2,3,4,5,9,11,31,32,55,56,],[0,-1,-3,-4,-5,-2,-8,-9,-10,-23,-20,]),'SEMICOLON':([3,4,5,9,10,11,14,15,16,17,18,20,21,22,23,24,25,27,31,32,46,47,48,50,51,52,54,55,56,61,],[-3,-4,-5,-2,11,-8,-24,31,32,-25,-27,-12,-30,-13,-14,-15,-32,-36,-9,-10,-26,-28,-16,-29,-37,-38,-31,-23,-20,-39,]),'RBLOCK':([3,4,5,9,11,31,32,42,55,56,],[-3,-4,-5,-2,-8,-9,-10,55,-23,-20,]),'ID':([6,7,8,12,19,28,30,33,37,38,39,40,41,53,57,],[10,-6,-7,14,14,43,14,14,51,-19,51,-33,-34,14,60,]),'EQUAL':([10,14,],[12,30,]),'LPAREN':([10,12,19,30,33,37,38,39,40,41,53,],[13,19,33,33,33,53,-19,53,-33,-34,33,]),'NUMBER':([12,19,30,33,37,38,39,40,41,49,53,],[17,36,17,17,52,-19,52,-33,-34,58,17,]),'LBLOCK':([12,44,],[26,26,]),'RPAREN':([14,17,18,21,25,27,29,34,35,36,43,46,47,50,51,52,54,58,59,60,61,],[-24,-25,-27,-30,-32,-36,44,47,48,-18,-21,-26,-28,-29,-37,-38,-31,-17,61,-22,-39,]),'PLUS':([14,17,25,27,36,47,51,52,61,],[-37,-38,40,-36,-38,-39,-37,-38,-39,]),'MINUS':([14,17,25,27,36,47,51,52,61,],[-37,-38,41,-36,-38,-39,-37,-38,-39,]),'DEQUAL':([14,17,21,25,27,36,47,51,52,54,61,],[-37,-38,38,-32,-36,-38,-39,-37,-38,-31,-39,]),'COMMA':([29,35,36,43,58,60,],[45,49,-18,-21,-17,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_lista':([0,12,26,],[2,22,42,]),'declaracion':([0,2,12,22,26,42,],[3,9,3,9,3,9,]),'declaracion_var':([0,2,12,22,26,42,],[4,4,4,4,4,4,]),'declaracion_funcion':([0,2,12,22,26,42,],[5,5,5,5,5,5,]),'especificador':([0,2,12,13,22,26,42,45,],[6,6,6,28,6,6,6,57,]),'expresion':([12,19,30,33,53,],[15,34,46,34,59,]),'estructura_dato':([12,],[16,]),'expresion_simple':([12,19,30,33,53,],[18,18,18,18,18,]),'estructura_compuesta':([12,],[20,]),'expresion_aditiva':([12,19,30,33,37,39,53,],[21,21,21,21,50,54,21,]),'compound_stmt':([12,44,],[23,56,]),'tupla':([12,],[24,]),'termino':([12,19,30,33,37,39,53,],[25,25,25,25,25,25,25,]),'factor':([12,19,30,33,37,39,53,],[27,27,27,27,27,27,27,]),'parametro':([13,],[29,]),'elementos':([19,],[35,]),'igualdad':([21,],[37,]),'sumorest':([25,],[39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> declaracion_lista','programa',1,'p_programa','AnalizadorSintactico.py',39),
  ('declaracion_lista -> declaracion_lista declaracion','declaracion_lista',2,'p_declaracion_lista','AnalizadorSintactico.py',44),
  ('declaracion_lista -> declaracion','declaracion_lista',1,'p_declaracion_lista','AnalizadorSintactico.py',45),
  ('declaracion -> declaracion_var','declaracion',1,'p_declaracion','AnalizadorSintactico.py',53),
  ('declaracion -> declaracion_funcion','declaracion',1,'p_declaracion','AnalizadorSintactico.py',54),
  ('especificador -> INT','especificador',1,'p_especificador','AnalizadorSintactico.py',59),
  ('especificador -> FLOAT','especificador',1,'p_especificador','AnalizadorSintactico.py',60),
  ('declaracion_var -> especificador ID SEMICOLON','declaracion_var',3,'p_declaracion_var','AnalizadorSintactico.py',67),
  ('declaracion_var -> especificador ID EQUAL expresion SEMICOLON','declaracion_var',5,'p_declaracion_var','AnalizadorSintactico.py',68),
  ('declaracion_var -> especificador ID EQUAL estructura_dato SEMICOLON','declaracion_var',5,'p_declaracion_var','AnalizadorSintactico.py',69),
  ('estructura_dato -> expresion','estructura_dato',1,'p_estructura_dato','AnalizadorSintactico.py',88),
  ('estructura_dato -> estructura_compuesta','estructura_dato',1,'p_estructura_dato','AnalizadorSintactico.py',89),
  ('estructura_compuesta -> declaracion_lista','estructura_compuesta',1,'p_estructura_compuesta','AnalizadorSintactico.py',94),
  ('estructura_compuesta -> compound_stmt','estructura_compuesta',1,'p_estructura_compuesta','AnalizadorSintactico.py',95),
  ('estructura_compuesta -> tupla','estructura_compuesta',1,'p_estructura_compuesta','AnalizadorSintactico.py',96),
  ('tupla -> LPAREN elementos RPAREN','tupla',3,'p_tupla','AnalizadorSintactico.py',101),
  ('elementos -> elementos COMMA NUMBER','elementos',3,'p_elementos','AnalizadorSintactico.py',106),
  ('elementos -> NUMBER','elementos',1,'p_elementos','AnalizadorSintactico.py',107),
  ('igualdad -> DEQUAL','igualdad',1,'p_igualdad','AnalizadorSintactico.py',114),
  ('declaracion_funcion -> especificador ID LPAREN parametro RPAREN compound_stmt','declaracion_funcion',6,'p_declaracion_funcion','AnalizadorSintactico.py',121),
  ('parametro -> especificador ID','parametro',2,'p_parametro','AnalizadorSintactico.py',129),
  ('parametro -> parametro COMMA especificador ID','parametro',4,'p_parametro','AnalizadorSintactico.py',130),
  ('compound_stmt -> LBLOCK declaracion_lista RBLOCK','compound_stmt',3,'p_compound_stmt','AnalizadorSintactico.py',139),
  ('expresion -> ID','expresion',1,'p_expresion','AnalizadorSintactico.py',146),
  ('expresion -> NUMBER','expresion',1,'p_expresion','AnalizadorSintactico.py',147),
  ('expresion -> ID EQUAL expresion','expresion',3,'p_expresion','AnalizadorSintactico.py',148),
  ('expresion -> expresion_simple','expresion',1,'p_expresion','AnalizadorSintactico.py',149),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_expresion','AnalizadorSintactico.py',150),
  ('expresion_simple -> expresion_aditiva igualdad expresion_aditiva','expresion_simple',3,'p_expresion_simple','AnalizadorSintactico.py',165),
  ('expresion_simple -> expresion_aditiva','expresion_simple',1,'p_expresion_simple','AnalizadorSintactico.py',166),
  ('expresion_aditiva -> termino sumorest expresion_aditiva','expresion_aditiva',3,'p_expresion_aditiva','AnalizadorSintactico.py',177),
  ('expresion_aditiva -> termino','expresion_aditiva',1,'p_expresion_aditiva','AnalizadorSintactico.py',178),
  ('sumorest -> PLUS','sumorest',1,'p_sumorest','AnalizadorSintactico.py',194),
  ('sumorest -> MINUS','sumorest',1,'p_sumorest','AnalizadorSintactico.py',195),
  ('variable_scope -> ID','variable_scope',1,'p_variable_scope','AnalizadorSintactico.py',201),
  ('termino -> factor','termino',1,'p_termino','AnalizadorSintactico.py',207),
  ('factor -> ID','factor',1,'p_factor','AnalizadorSintactico.py',212),
  ('factor -> NUMBER','factor',1,'p_factor','AnalizadorSintactico.py',213),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','AnalizadorSintactico.py',214),
]
