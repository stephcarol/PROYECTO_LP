
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLESSLESSEQUALGREATERGREATEREQUALDEQUALDISTINTrightEQUALAND APOSTROPHE BACKSLASH BITAND BITNOT BITOR BITXOR BOOL BREAK CASE CATCH CHAR CIN CLASS COLON COMMA CONST CONTINUE COUT DEFAULT DELETE DEQUAL DISTINT DIVIDE DIVIDEEQUAL DO DOUBLE ELSE ENDL EQUAL EXPLICIT FLOAT FOR GET GREATER GREATEREQUAL HASH ID IF INCLUDE INT LBLOCK LBRACKET LESS LESSEQUAL LGREATER LPAREN MINUS MINUSEQUAL MINUSMINUS MODULE NAMESPACE NOT NUMBER OR PLUS PLUSEQUAL PLUSPLUS POINT PRIVATE PUBLIC QUOTES RBLOCK RBRACKET RETURN RGREATER RPAREN SEMICOLON SIZEOF STATIC STD STRING SWITCH TIMES TIMESEQUAL TRY TYPEDEF USING VOID WHILE WHITESPACEprograma : declaracion_listadeclaracion_lista : declaracion_lista declaracion\n                         | declaraciondeclaracion : declaracion_var\n                   | declaracion_funcion\n                   | declaracion_EC\n                   | declaracion_clasedeclaracion_var : especificador ID SEMICOLON\n                       | especificador ID EQUAL expresion SEMICOLON\n                       | especificador ID EQUAL estructura_dato SEMICOLONespecificador : INT\n                     | FLOAT\n                     | DOUBLE\n                     | CHAR\n                     | STRING\n                     | BOOLdeclaracion_funcion : especificador ID LPAREN parametro RPAREN compound_stmt\n                           | VOID ID LPAREN parametro RPAREN compound_stmtparametro : parametro_lista\n                 | VOIDparametro_lista : parametro_lista COMMA param\n                       | paramparam : especificador ID\n             | especificador ID LBRACKET RBRACKETexpresion : ID\n                 | NUMBER\n                 | ID EQUAL expresion\n                 | expresion_simple\n                 | LPAREN expresion RPARENexpresion_simple : expresion_aditiva igualdad expresion_aditiva\n                        | expresion_aditivaigualdad : LESS\n                | LESSEQUAL\n                | GREATER\n                | GREATEREQUAL\n                | DEQUAL\n                | DISTINTexpresion_aditiva : expresion_aditiva sumorest termino\n                         | terminosumorest : PLUS\n                | MINUStermino : termino multodiv factor\n               | factormultodiv : TIMES\n                | DIVIDEfactor : LPAREN expresion RPAREN\n              | declaracion_var\n              | NUMBERestructura_dato : array_init\n                       | tuple_init\n                       | vector_initarray_init : LBRACKET expresion_list RBRACKETtuple_init : LPAREN expresion_list RPARENvector_init : LGREATER expresion_list RGREATERexpresion_list : expresion_list COMMA expresion\n                      | expresion\n                      | emptydeclaracion_EC : selection_stmt\n                      | iteration_stmtselection_stmt : IF LPAREN expresion RPAREN statement\n                      | IF LPAREN expresion RPAREN statement ELSE statement\n                      | SWITCH LPAREN expresion RPAREN statementiteration_stmt : WHILE LPAREN expresion RPAREN statementstatement : expresion_stmt\n                 | compound_stmtexpresion_stmt : expresion SEMICOLON\n                      | SEMICOLONcompound_stmt : LBLOCK statement_list RBLOCKstatement_list : statement_list statement\n                      | statementdeclaracion_clase : class_header LBLOCK class_body RBLOCKclass_header : CLASS ID\n                    | CLASS ID COLON especificadorclass_body : class_member_listclass_member_list : class_member_list class_member\n                         | class_memberclass_member : especificador ID SEMICOLON\n                    | especificador ID EQUAL expresion SEMICOLON\n                    | especificador ID LPAREN parametro RPAREN compound_stmt\n                    | VOID ID LPAREN parametro RPAREN compound_stmt\n                    | declaracion_ECempty :'
    
_lr_action_items = {'VOID':([0,2,3,4,5,6,7,10,11,23,26,31,33,34,36,37,40,68,69,92,93,104,106,107,110,111,112,113,121,122,128,130,134,141,144,145,148,149,],[9,9,-3,-4,-5,-6,-7,-58,-59,-2,39,-8,65,65,39,-76,-81,-71,-75,-9,-10,-77,65,65,-60,-64,-65,-67,-62,-63,-17,-18,-66,-78,-61,-68,-79,-80,]),'INT':([0,2,3,4,5,6,7,10,11,23,26,27,28,29,31,32,33,34,36,37,40,41,53,56,60,61,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,92,93,102,104,105,106,107,110,111,112,113,114,117,121,122,124,128,130,134,135,136,137,141,144,145,146,148,149,],[13,13,-3,-4,-5,-6,-7,-58,-59,-2,13,13,13,13,-8,13,13,13,13,-76,-81,13,13,13,13,13,-71,-75,13,13,13,13,-32,-33,-34,-35,-36,-37,-40,-41,13,-44,-45,13,13,-9,-10,13,-77,13,13,13,-60,-64,-65,-67,13,13,-62,-63,13,-17,-18,-66,13,13,-70,-78,-61,-68,-69,-79,-80,]),'FLOAT':([0,2,3,4,5,6,7,10,11,23,26,27,28,29,31,32,33,34,36,37,40,41,53,56,60,61,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,92,93,102,104,105,106,107,110,111,112,113,114,117,121,122,124,128,130,134,135,136,137,141,144,145,146,148,149,],[14,14,-3,-4,-5,-6,-7,-58,-59,-2,14,14,14,14,-8,14,14,14,14,-76,-81,14,14,14,14,14,-71,-75,14,14,14,14,-32,-33,-34,-35,-36,-37,-40,-41,14,-44,-45,14,14,-9,-10,14,-77,14,14,14,-60,-64,-65,-67,14,14,-62,-63,14,-17,-18,-66,14,14,-70,-78,-61,-68,-69,-79,-80,]),'DOUBLE':([0,2,3,4,5,6,7,10,11,23,26,27,28,29,31,32,33,34,36,37,40,41,53,56,60,61,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,92,93,102,104,105,106,107,110,111,112,113,114,117,121,122,124,128,130,134,135,136,137,141,144,145,146,148,149,],[15,15,-3,-4,-5,-6,-7,-58,-59,-2,15,15,15,15,-8,15,15,15,15,-76,-81,15,15,15,15,15,-71,-75,15,15,15,15,-32,-33,-34,-35,-36,-37,-40,-41,15,-44,-45,15,15,-9,-10,15,-77,15,15,15,-60,-64,-65,-67,15,15,-62,-63,15,-17,-18,-66,15,15,-70,-78,-61,-68,-69,-79,-80,]),'CHAR':([0,2,3,4,5,6,7,10,11,23,26,27,28,29,31,32,33,34,36,37,40,41,53,56,60,61,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,92,93,102,104,105,106,107,110,111,112,113,114,117,121,122,124,128,130,134,135,136,137,141,144,145,146,148,149,],[16,16,-3,-4,-5,-6,-7,-58,-59,-2,16,16,16,16,-8,16,16,16,16,-76,-81,16,16,16,16,16,-71,-75,16,16,16,16,-32,-33,-34,-35,-36,-37,-40,-41,16,-44,-45,16,16,-9,-10,16,-77,16,16,16,-60,-64,-65,-67,16,16,-62,-63,16,-17,-18,-66,16,16,-70,-78,-61,-68,-69,-79,-80,]),'STRING':([0,2,3,4,5,6,7,10,11,23,26,27,28,29,31,32,33,34,36,37,40,41,53,56,60,61,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,92,93,102,104,105,106,107,110,111,112,113,114,117,121,122,124,128,130,134,135,136,137,141,144,145,146,148,149,],[17,17,-3,-4,-5,-6,-7,-58,-59,-2,17,17,17,17,-8,17,17,17,17,-76,-81,17,17,17,17,17,-71,-75,17,17,17,17,-32,-33,-34,-35,-36,-37,-40,-41,17,-44,-45,17,17,-9,-10,17,-77,17,17,17,-60,-64,-65,-67,17,17,-62,-63,17,-17,-18,-66,17,17,-70,-78,-61,-68,-69,-79,-80,]),'BOOL':([0,2,3,4,5,6,7,10,11,23,26,27,28,29,31,32,33,34,36,37,40,41,53,56,60,61,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,92,93,102,104,105,106,107,110,111,112,113,114,117,121,122,124,128,130,134,135,136,137,141,144,145,146,148,149,],[18,18,-3,-4,-5,-6,-7,-58,-59,-2,18,18,18,18,-8,18,18,18,18,-76,-81,18,18,18,18,18,-71,-75,18,18,18,18,-32,-33,-34,-35,-36,-37,-40,-41,18,-44,-45,18,18,-9,-10,18,-77,18,18,18,-60,-64,-65,-67,18,18,-62,-63,18,-17,-18,-66,18,18,-70,-78,-61,-68,-69,-79,-80,]),'IF':([0,2,3,4,5,6,7,10,11,23,26,31,36,37,40,68,69,92,93,104,110,111,112,113,121,122,128,130,134,141,144,145,148,149,],[19,19,-3,-4,-5,-6,-7,-58,-59,-2,19,-8,19,-76,-81,-71,-75,-9,-10,-77,-60,-64,-65,-67,-62,-63,-17,-18,-66,-78,-61,-68,-79,-80,]),'SWITCH':([0,2,3,4,5,6,7,10,11,23,26,31,36,37,40,68,69,92,93,104,110,111,112,113,121,122,128,130,134,141,144,145,148,149,],[20,20,-3,-4,-5,-6,-7,-58,-59,-2,20,-8,20,-76,-81,-71,-75,-9,-10,-77,-60,-64,-65,-67,-62,-63,-17,-18,-66,-78,-61,-68,-79,-80,]),'WHILE':([0,2,3,4,5,6,7,10,11,23,26,31,36,37,40,68,69,92,93,104,110,111,112,113,121,122,128,130,134,141,144,145,148,149,],[21,21,-3,-4,-5,-6,-7,-58,-59,-2,21,-8,21,-76,-81,-71,-75,-9,-10,-77,-60,-64,-65,-67,-62,-63,-17,-18,-66,-78,-61,-68,-79,-80,]),'CLASS':([0,2,3,4,5,6,7,10,11,23,31,68,92,93,110,111,112,113,121,122,128,130,134,144,145,],[22,22,-3,-4,-5,-6,-7,-58,-59,-2,-8,-71,-9,-10,-60,-64,-65,-67,-62,-63,-17,-18,-66,-61,-68,]),'$end':([1,2,3,4,5,6,7,10,11,23,31,68,92,93,110,111,112,113,121,122,128,130,134,144,145,],[0,-1,-3,-4,-5,-6,-7,-58,-59,-2,-8,-71,-9,-10,-60,-64,-65,-67,-62,-63,-17,-18,-66,-61,-68,]),'ID':([8,9,13,14,15,16,17,18,22,27,28,29,32,38,39,41,50,56,60,61,62,73,74,89,90,105,111,112,113,114,117,124,134,135,136,137,145,146,],[24,25,-11,-12,-13,-14,-15,-16,30,43,43,43,43,70,71,43,88,43,43,43,100,43,43,43,43,43,-64,-65,-67,43,43,43,-66,43,43,-70,-68,-69,]),'RBLOCK':([10,11,35,36,37,40,69,104,110,111,112,113,121,122,134,136,137,141,144,145,146,148,149,],[-58,-59,68,-74,-76,-81,-75,-77,-60,-64,-65,-67,-62,-63,-66,145,-70,-78,-61,-68,-69,-79,-80,]),'LBLOCK':([12,13,14,15,16,17,18,30,73,89,90,91,101,103,111,112,113,114,134,135,136,137,142,143,145,146,],[26,-11,-12,-13,-14,-15,-16,-72,114,114,114,-73,114,114,-64,-65,-67,114,-66,114,114,-70,114,114,-68,-69,]),'LPAREN':([19,20,21,24,25,27,28,29,32,41,56,60,61,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,105,111,112,113,114,117,124,134,135,136,137,145,146,],[27,28,29,33,34,41,41,41,56,41,41,41,41,106,107,41,41,117,117,-32,-33,-34,-35,-36,-37,-40,-41,117,-44,-45,41,41,41,-64,-65,-67,41,41,41,-66,41,41,-70,-68,-69,]),'SEMICOLON':([24,31,43,44,45,46,47,48,49,54,55,57,58,59,70,73,88,89,90,92,93,108,109,111,112,113,114,115,116,118,119,120,123,125,126,131,134,135,136,137,145,146,147,],[31,-8,-25,-26,-28,-31,-39,-43,-47,92,93,-49,-50,-51,104,113,31,113,113,-9,-10,-29,134,-64,-65,-67,113,-27,-30,-48,-38,-42,-53,-52,-54,141,-66,113,113,-70,-68,-69,-46,]),'EQUAL':([24,43,70,88,],[32,74,105,32,]),'NUMBER':([27,28,29,32,41,56,60,61,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,105,111,112,113,114,117,124,134,135,136,137,145,146,],[44,44,44,44,44,44,44,44,44,44,118,118,-32,-33,-34,-35,-36,-37,-40,-41,118,-44,-45,44,44,44,-64,-65,-67,44,44,44,-66,44,44,-70,-68,-69,]),'COLON':([30,],[53,]),'TIMES':([31,44,47,48,49,92,93,108,118,119,120,147,],[-8,-48,86,-43,-47,-9,-10,-46,-48,86,-42,-46,]),'DIVIDE':([31,44,47,48,49,92,93,108,118,119,120,147,],[-8,-48,87,-43,-47,-9,-10,-46,-48,87,-42,-46,]),'LESS':([31,44,46,47,48,49,92,93,108,118,119,120,147,],[-8,-48,77,-39,-43,-47,-9,-10,-46,-48,-38,-42,-46,]),'LESSEQUAL':([31,44,46,47,48,49,92,93,108,118,119,120,147,],[-8,-48,78,-39,-43,-47,-9,-10,-46,-48,-38,-42,-46,]),'GREATER':([31,44,46,47,48,49,92,93,108,118,119,120,147,],[-8,-48,79,-39,-43,-47,-9,-10,-46,-48,-38,-42,-46,]),'GREATEREQUAL':([31,44,46,47,48,49,92,93,108,118,119,120,147,],[-8,-48,80,-39,-43,-47,-9,-10,-46,-48,-38,-42,-46,]),'DEQUAL':([31,44,46,47,48,49,92,93,108,118,119,120,147,],[-8,-48,81,-39,-43,-47,-9,-10,-46,-48,-38,-42,-46,]),'DISTINT':([31,44,46,47,48,49,92,93,108,118,119,120,147,],[-8,-48,82,-39,-43,-47,-9,-10,-46,-48,-38,-42,-46,]),'PLUS':([31,44,46,47,48,49,92,93,108,116,118,119,120,147,],[-8,-48,83,-39,-43,-47,-9,-10,-46,83,-48,-38,-42,-46,]),'MINUS':([31,44,46,47,48,49,92,93,108,116,118,119,120,147,],[-8,-48,84,-39,-43,-47,-9,-10,-46,84,-48,-38,-42,-46,]),'RPAREN':([31,42,43,44,45,46,47,48,49,51,52,56,63,64,65,66,67,72,92,93,94,95,96,100,108,115,116,118,119,120,129,132,133,138,139,140,147,],[-8,73,-25,-26,-28,-31,-39,-43,-47,89,90,-82,101,-19,-20,-22,103,108,-9,-10,108,123,-57,-23,-29,-27,-30,-48,-38,-42,-21,142,143,147,-55,-24,-46,]),'COMMA':([31,43,44,45,46,47,48,49,56,60,61,64,66,92,93,94,95,96,97,98,99,100,108,115,116,118,119,120,129,139,140,147,],[-8,-25,-26,-28,-31,-39,-43,-47,-82,-82,-82,102,-22,-9,-10,-56,124,-57,124,-56,124,-23,-29,-27,-30,-48,-38,-42,-21,-55,-24,-46,]),'RBRACKET':([31,43,44,45,46,47,48,49,60,92,93,96,97,98,108,115,116,118,119,120,127,139,147,],[-8,-25,-26,-28,-31,-39,-43,-47,-82,-9,-10,-57,125,-56,-29,-27,-30,-48,-38,-42,140,-55,-46,]),'RGREATER':([31,43,44,45,46,47,48,49,61,92,93,96,98,99,108,115,116,118,119,120,139,147,],[-8,-25,-26,-28,-31,-39,-43,-47,-82,-9,-10,-57,-56,126,-29,-27,-30,-48,-38,-42,-55,-46,]),'LBRACKET':([32,100,],[60,127,]),'LGREATER':([32,],[61,]),'ELSE':([110,111,112,113,134,145,],[135,-64,-65,-67,-66,-68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_lista':([0,],[2,]),'declaracion':([0,2,],[3,23,]),'declaracion_var':([0,2,27,28,29,32,41,56,60,61,73,74,75,76,85,89,90,105,114,117,124,135,136,],[4,4,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'declaracion_funcion':([0,2,],[5,5,]),'declaracion_EC':([0,2,26,36,],[6,6,40,40,]),'declaracion_clase':([0,2,],[7,7,]),'especificador':([0,2,26,27,28,29,32,33,34,36,41,53,56,60,61,73,74,75,76,85,89,90,102,105,106,107,114,117,124,135,136,],[8,8,38,50,50,50,50,62,62,38,50,91,50,50,50,50,50,50,50,50,50,50,62,50,62,62,50,50,50,50,50,]),'selection_stmt':([0,2,26,36,],[10,10,10,10,]),'iteration_stmt':([0,2,26,36,],[11,11,11,11,]),'class_header':([0,2,],[12,12,]),'class_body':([26,],[35,]),'class_member_list':([26,],[36,]),'class_member':([26,36,],[37,69,]),'expresion':([27,28,29,32,41,56,60,61,73,74,89,90,105,114,117,124,135,136,],[42,51,52,54,72,94,98,98,109,115,109,109,131,109,138,139,109,109,]),'expresion_simple':([27,28,29,32,41,56,60,61,73,74,89,90,105,114,117,124,135,136,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'expresion_aditiva':([27,28,29,32,41,56,60,61,73,74,75,89,90,105,114,117,124,135,136,],[46,46,46,46,46,46,46,46,46,46,116,46,46,46,46,46,46,46,46,]),'termino':([27,28,29,32,41,56,60,61,73,74,75,76,89,90,105,114,117,124,135,136,],[47,47,47,47,47,47,47,47,47,47,47,119,47,47,47,47,47,47,47,47,]),'factor':([27,28,29,32,41,56,60,61,73,74,75,76,85,89,90,105,114,117,124,135,136,],[48,48,48,48,48,48,48,48,48,48,48,48,120,48,48,48,48,48,48,48,48,]),'estructura_dato':([32,],[55,]),'array_init':([32,],[57,]),'tuple_init':([32,],[58,]),'vector_init':([32,],[59,]),'parametro':([33,34,106,107,],[63,67,132,133,]),'parametro_lista':([33,34,106,107,],[64,64,64,64,]),'param':([33,34,102,106,107,],[66,66,129,66,66,]),'igualdad':([46,],[75,]),'sumorest':([46,116,],[76,76,]),'multodiv':([47,119,],[85,85,]),'expresion_list':([56,60,61,],[95,97,99,]),'empty':([56,60,61,],[96,96,96,]),'statement':([73,89,90,114,135,136,],[110,121,122,137,144,146,]),'expresion_stmt':([73,89,90,114,135,136,],[111,111,111,111,111,111,]),'compound_stmt':([73,89,90,101,103,114,135,136,142,143,],[112,112,112,128,130,112,112,112,148,149,]),'statement_list':([114,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> declaracion_lista','programa',1,'p_programa','main.py',43),
  ('declaracion_lista -> declaracion_lista declaracion','declaracion_lista',2,'p_declaracion_lista','main.py',47),
  ('declaracion_lista -> declaracion','declaracion_lista',1,'p_declaracion_lista','main.py',48),
  ('declaracion -> declaracion_var','declaracion',1,'p_declaracion','main.py',55),
  ('declaracion -> declaracion_funcion','declaracion',1,'p_declaracion','main.py',56),
  ('declaracion -> declaracion_EC','declaracion',1,'p_declaracion','main.py',57),
  ('declaracion -> declaracion_clase','declaracion',1,'p_declaracion','main.py',58),
  ('declaracion_var -> especificador ID SEMICOLON','declaracion_var',3,'p_declaracion_var','main.py',63),
  ('declaracion_var -> especificador ID EQUAL expresion SEMICOLON','declaracion_var',5,'p_declaracion_var','main.py',64),
  ('declaracion_var -> especificador ID EQUAL estructura_dato SEMICOLON','declaracion_var',5,'p_declaracion_var','main.py',65),
  ('especificador -> INT','especificador',1,'p_especificador','main.py',84),
  ('especificador -> FLOAT','especificador',1,'p_especificador','main.py',85),
  ('especificador -> DOUBLE','especificador',1,'p_especificador','main.py',86),
  ('especificador -> CHAR','especificador',1,'p_especificador','main.py',87),
  ('especificador -> STRING','especificador',1,'p_especificador','main.py',88),
  ('especificador -> BOOL','especificador',1,'p_especificador','main.py',89),
  ('declaracion_funcion -> especificador ID LPAREN parametro RPAREN compound_stmt','declaracion_funcion',6,'p_declaracion_funcion','main.py',94),
  ('declaracion_funcion -> VOID ID LPAREN parametro RPAREN compound_stmt','declaracion_funcion',6,'p_declaracion_funcion','main.py',95),
  ('parametro -> parametro_lista','parametro',1,'p_parametro','main.py',102),
  ('parametro -> VOID','parametro',1,'p_parametro','main.py',103),
  ('parametro_lista -> parametro_lista COMMA param','parametro_lista',3,'p_parametro_lista','main.py',107),
  ('parametro_lista -> param','parametro_lista',1,'p_parametro_lista','main.py',108),
  ('param -> especificador ID','param',2,'p_param','main.py',115),
  ('param -> especificador ID LBRACKET RBRACKET','param',4,'p_param','main.py',116),
  ('expresion -> ID','expresion',1,'p_expresion','main.py',124),
  ('expresion -> NUMBER','expresion',1,'p_expresion','main.py',125),
  ('expresion -> ID EQUAL expresion','expresion',3,'p_expresion','main.py',126),
  ('expresion -> expresion_simple','expresion',1,'p_expresion','main.py',127),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_expresion','main.py',128),
  ('expresion_simple -> expresion_aditiva igualdad expresion_aditiva','expresion_simple',3,'p_expresion_simple','main.py',141),
  ('expresion_simple -> expresion_aditiva','expresion_simple',1,'p_expresion_simple','main.py',142),
  ('igualdad -> LESS','igualdad',1,'p_igualdad','main.py',149),
  ('igualdad -> LESSEQUAL','igualdad',1,'p_igualdad','main.py',150),
  ('igualdad -> GREATER','igualdad',1,'p_igualdad','main.py',151),
  ('igualdad -> GREATEREQUAL','igualdad',1,'p_igualdad','main.py',152),
  ('igualdad -> DEQUAL','igualdad',1,'p_igualdad','main.py',153),
  ('igualdad -> DISTINT','igualdad',1,'p_igualdad','main.py',154),
  ('expresion_aditiva -> expresion_aditiva sumorest termino','expresion_aditiva',3,'p_expresion_aditiva','main.py',158),
  ('expresion_aditiva -> termino','expresion_aditiva',1,'p_expresion_aditiva','main.py',159),
  ('sumorest -> PLUS','sumorest',1,'p_sumorest','main.py',166),
  ('sumorest -> MINUS','sumorest',1,'p_sumorest','main.py',167),
  ('termino -> termino multodiv factor','termino',3,'p_termino','main.py',171),
  ('termino -> factor','termino',1,'p_termino','main.py',172),
  ('multodiv -> TIMES','multodiv',1,'p_multodiv','main.py',179),
  ('multodiv -> DIVIDE','multodiv',1,'p_multodiv','main.py',180),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','main.py',184),
  ('factor -> declaracion_var','factor',1,'p_factor','main.py',185),
  ('factor -> NUMBER','factor',1,'p_factor','main.py',186),
  ('estructura_dato -> array_init','estructura_dato',1,'p_estructura_dato','main.py',195),
  ('estructura_dato -> tuple_init','estructura_dato',1,'p_estructura_dato','main.py',196),
  ('estructura_dato -> vector_init','estructura_dato',1,'p_estructura_dato','main.py',197),
  ('array_init -> LBRACKET expresion_list RBRACKET','array_init',3,'p_array_init','main.py',201),
  ('tuple_init -> LPAREN expresion_list RPAREN','tuple_init',3,'p_tuple_init','main.py',205),
  ('vector_init -> LGREATER expresion_list RGREATER','vector_init',3,'p_vector_init','main.py',209),
  ('expresion_list -> expresion_list COMMA expresion','expresion_list',3,'p_expresion_list','main.py',213),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','main.py',214),
  ('expresion_list -> empty','expresion_list',1,'p_expresion_list','main.py',215),
  ('declaracion_EC -> selection_stmt','declaracion_EC',1,'p_declaracion_EC','main.py',224),
  ('declaracion_EC -> iteration_stmt','declaracion_EC',1,'p_declaracion_EC','main.py',225),
  ('selection_stmt -> IF LPAREN expresion RPAREN statement','selection_stmt',5,'p_selection_stmt','main.py',229),
  ('selection_stmt -> IF LPAREN expresion RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','main.py',230),
  ('selection_stmt -> SWITCH LPAREN expresion RPAREN statement','selection_stmt',5,'p_selection_stmt','main.py',231),
  ('iteration_stmt -> WHILE LPAREN expresion RPAREN statement','iteration_stmt',5,'p_iteration_stmt','main.py',240),
  ('statement -> expresion_stmt','statement',1,'p_statement','main.py',244),
  ('statement -> compound_stmt','statement',1,'p_statement','main.py',245),
  ('expresion_stmt -> expresion SEMICOLON','expresion_stmt',2,'p_expresion_stmt','main.py',249),
  ('expresion_stmt -> SEMICOLON','expresion_stmt',1,'p_expresion_stmt','main.py',250),
  ('compound_stmt -> LBLOCK statement_list RBLOCK','compound_stmt',3,'p_compound_stmt','main.py',257),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',261),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',262),
  ('declaracion_clase -> class_header LBLOCK class_body RBLOCK','declaracion_clase',4,'p_declaracion_clase','main.py',269),
  ('class_header -> CLASS ID','class_header',2,'p_class_header','main.py',276),
  ('class_header -> CLASS ID COLON especificador','class_header',4,'p_class_header','main.py',277),
  ('class_body -> class_member_list','class_body',1,'p_class_body','main.py',290),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','main.py',294),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','main.py',295),
  ('class_member -> especificador ID SEMICOLON','class_member',3,'p_class_member','main.py',299),
  ('class_member -> especificador ID EQUAL expresion SEMICOLON','class_member',5,'p_class_member','main.py',300),
  ('class_member -> especificador ID LPAREN parametro RPAREN compound_stmt','class_member',6,'p_class_member','main.py',301),
  ('class_member -> VOID ID LPAREN parametro RPAREN compound_stmt','class_member',6,'p_class_member','main.py',302),
  ('class_member -> declaracion_EC','class_member',1,'p_class_member','main.py',303),
  ('empty -> <empty>','empty',0,'p_empty','main.py',326),
]
